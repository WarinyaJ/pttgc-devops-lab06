name: Bug Fix in Release branch

on:
  push:
    branches:
      - release*

jobs:
  unittest:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: './src/go.mod'
      - run: go mod tidy
        working-directory: ./src
      - run: go test ./...
        working-directory: ./src
  coverage:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: './src/go.mod'
      - run: go mod tidy
        working-directory: ./src
        name: Download libraries
      - run: go test -coverprofile coverage.out ./...
        working-directory: ./src
        name: Code Coverage Checking
      - run: go tool cover -func coverage.out -o coverage.txt
        working-directory: ./src
        name: Convert Code Coverage Report format
      - uses: actions/upload-artifact@v3
        name: Store code coverage report 
        with:
          name: code-coverage-report
          path: src/coverage.txt
  
  code-scan:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'
      - uses: actions/upload-artifact@v3
        with:
          name: code-scan-result
          path: trivy-results.sarif

  quality-gate:
    runs-on: ubuntu-latest
    needs: ["coverage", "unittest", "code-scan"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: code-coverage-report
          path: ./src
      - run: python coverage.py 1
        working-directory: ./src
        name: Simple Quality Gate
  
  docker-build:
    name: DockerBuild
    runs-on: ubuntu-latest
    needs: ["quality-gate"]
    steps:
      - uses: actions/checkout@v3
      - name: Build an image from Dockerfile
        run: |
          docker build . --file Dockerfile --tag pttgc-devops-lab06/demo:${{ github.sha }}

  deploy-dev:
    name: Dev Deployment
    runs-on: ubuntu-latest
    needs: ["docker-build"]
    steps:
      - run: echo 'Deploy to dev env'
